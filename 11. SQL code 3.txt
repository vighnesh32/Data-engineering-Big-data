CREATE DATABASE self_db2;

-- command to use the DATABASE
USE self_db2;

-- command to create TABLE
CREATE TABLE if not exists employee
(
    id INT,
    name VARCHAR(100),
    age INT,
    hiring_date DATE,
    salary INT,
    city VARCHAR(100)

);
insert into employee values(1,'Vighnesh', 24, '2023-07-2', 20000, 'London');

insert into employee values(2,'Catalin', 26, '2023-07-12', 30000, 'Tokyo');

insert into employee values(3,'Reshma', 28, '2023-07-13', 40000, 'Mumbai');

insert into employee values(5,'Ankita', 23, '2023-07-14', 45000, 'Texas');
select * from employee;

-- perform multi updates
update employee set age=24,salary=250000 where hiring_date = '2023-07-02';

select * from employee;

-- apply auto increment
create table auto_inc_exmp
(
  id int auto_increment,
  name varchar(20),
  primary key (id)
);

insert into auto_inc_exmp(name) values('Vighnesh');
insert into auto_inc_exmp(name) values('Adam');

select * from auto_inc_exmp;


-- use of LIMIT
select * from employee;
select * from employee LIMIT 2;

-- sorting DATA
select * from employee order by name; -- by default ascending

-- desc ORDER
select * from employee order by name DESC;


-- display employee data in desc order of salary and if salaries are same for more than one employees
-- arrange their data in ascedinding order of name

select * from employee order by salary desc, name asc;

-- when we ignore multilevel ordering
select * from employee order by salary desc;


-- Write a query to find the employee who is getting maximum salary?
select * from employee order by salary desc limit 1;

-- Write a query to find the employee who is getting minium salary?
select * from employee order by salary limit 1;


-- Conditional Operators ->    < , > , <= , >= 
-- Logical Operator -> AND, OR, NOT

-- list all employees who are getting salary more than 20000
select * from employee where salary>20000;


-- list all employees who are getting salary more than or equal to 20000
select * from employee where salary>=20000;

-- list all employees who are getting less than 20000
select * from employee where salary<20000;

-- list all employees who are getting salary less than or equal to 20000
select * from employee where salary<=20000;

-- filter the record where age of employees is equal to 20
select * from employee where age=20;

-- filter the record where age of employees is not equal to 20
-- we can use != or we can use <>
select * from employee where age != 20;
select * from employee where age <> 20;

-- find those employees who joined the company on 2023-07-02 and their salary is less than 260000
select * from employee where hiring_date = '2023-07-02' and salary<260000;

-- find those employees who joined the company after 2021-08-11 or  their salary is less than 20000000
select * from employee where hiring_date > '2023-07-02' or salary<20000000;


-- how to use Between operation in where clause
-- get all employees data who joined the company between hiring_date '2023-07-02' and '2023-07-12'
select * from employee where hiring_date between '2023-07-02' and '2023-07-12';


-- get all employees data who are getting salary in the range of 10000 to 28000
select * from employee where salary between 10000 and 28000;


-- how to use LIKE operation in where clause
-- % -> Zero, one or more than one characters
-- _ -> only one character

-- get all those employees whose name starts with 'V'
select * from employee where name like 'V%';

-- get all those employees whose name starts with 'Vi'
select * from employee where name like 'Vi%';

-- get all those employees whose name ends with 'n'
select * from employee where name like '%n';

-- get all those employees whose name starts with 'S' and ends with 'k'
select * from employee where name like 'V%h';

-- Get all those employees whose name will have exact 8 characters
select * from employee where name like '________';

-- Return all those employees whose name contains atleast 4 characters
select * from employee where name like '%____%';

-- How to use IS NULL or IS NOT NULL in the where clause
insert into employee values(6,'Sebastian', 28, '2023-07-13', NULL, 'Mumbai');

insert into employee values(7,'Sakshi', NULL, '2023-07-14', 45000, 'Texas');


# get all those employees whos age value is null
select * from employee where age is null;

# get all those employees whos salary value is not null
select * from employee where salary is not null;


# Table and Data for Group By
create table orders_data
(
 cust_id int,
 order_id int,
 country varchar(50),
 state varchar(50)
);


insert into orders_data values(1,100,'USA','Seattle');
insert into orders_data values(2,101,'INDIA','UP');
insert into orders_data values(2,103,'INDIA','Bihar');
insert into orders_data values(4,108,'USA','WDC');
insert into orders_data values(5,109,'UK','London');
insert into orders_data values(4,110,'USA','WDC');
insert into orders_data values(3,120,'INDIA','AP');
insert into orders_data values(2,121,'INDIA','Goa');
insert into orders_data values(1,131,'USA','Seattle');
insert into orders_data values(6,142,'USA','Seattle');
insert into orders_data values(7,150,'USA','Seattle');

select * from orders_data;

# calculate total order placed country wise
select country,count(*) as total_order from orders_data group by country;

# Write a query to find the total salary by each age group 

select age, sum(salary) from employee group by age;

# calculate different aggregated metrices for salary
select age, 
	   sum(salary) as total_salary_by_each_age_group,
       max(salary) as max_salary_by_each_age_group,
       min(salary) as min_salary_by_each_age_group,
       avg(salary) as avg_salary_by_each_age_group,
       count(*) as total_employees_by_each_age_group
from employee group by age;


